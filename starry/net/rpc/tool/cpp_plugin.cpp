#include <google/protobuf/compiler/plugin.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/printer.h>
#include <cassert>
#include <string>

#include "cpp_plugin.h"
#include "cpp_service.h"

namespace starry::compiler {

bool CppStarryGenerator::Generate(
    const google::protobuf::FileDescriptor* file,
    const std::string&,
    google::protobuf::compiler::GeneratorContext* context,
    std::string* error) const {
  if (file->package().empty()) {
    error->append("package name is missed.");
    return false;
  }

  std::string cpp_name = protoBaseName(std::string(file->name())) + ".pb";

  google::protobuf::io::Printer inc_printer(
      context->OpenForInsert(cpp_name + ".h", "includes"), '$');
  ServiceGenerator::genHeader(inc_printer);

  google::protobuf::io::Printer gdecl_printer(
      context->OpenForInsert(cpp_name + ".h", "namespace_scope"), '$');
  google::protobuf::io::Printer gimpl_printer(
      context->OpenForInsert(cpp_name + ".cc", "namespace_scope"), '$');

  gdecl_printer.Print("// declarations generated by cpp starry plugin.\n");

  std::vector<std::unique_ptr<ServiceGenerator>> service_generators;
  for (int i = 0; i < file->service_count(); i++) {
    service_generators.emplace_back(
        new ServiceGenerator(file->service(i), file->name(), i));
  }
  gdecl_printer.Print("\n");
  gdecl_printer.Print(kThickSeparator);
  gdecl_printer.Print("\n");

  // Generate forward declarations of classes.
  for (int i = 0; i < file->message_type_count(); i++) {
    gdecl_printer.Print(
        "using $classname$Ptr = ::std::shared_ptr<$classname$>;\n", "classname",
        ClassName(file->message_type(i), false));
  }

  for (int i = 0; i < file->service_count(); i++) {
    gdecl_printer.Print("\n");
    gdecl_printer.Print(kThinSeparator);
    gdecl_printer.Print("\n");
    service_generators[i]->generateDeclarations(&gdecl_printer);

    gimpl_printer.Print(kThickSeparator);
    gimpl_printer.Print("\n");
    service_generators[i]->generateImplementation(&gimpl_printer);
    gimpl_printer.Print("\n");
  }

  return true;
}

}  // namespace starry::compiler
namespace gpbc = google::protobuf::compiler;

int main(int argc, char* argv[]) {
  GOOGLE_PROTOBUF_VERIFY_VERSION;
  starry::compiler::CppStarryGenerator generator;
  return gpbc::PluginMain(argc, argv, &generator);
}
